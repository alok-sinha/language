

-> x ^ 0 : x
-> x ^ 1 : ~x
-> x ^ x = 0
-> x - 1 : resets the first 1 from left and all right 0s are set to 1
     101100000 - 1 = 101011111
     101100001 - 1 = 101100000

-> x & ~(x-1) : Gives the last bit set
-> x | (x-1) : sets all bits after last 1 bit
-> x + 1
    111100101 + 1  = 111101000     


-> negative numbers : 
    -> 2`s complement : n bit 2s complement of number N is pow(2,N)-N
    -> negative numbers are stored as 2's complement appended with 1 as sign
        : "1" + "pow(2,N-1)" # 1 is subtracted to accomodate sign
    -> In other words:
        -> Invert all the bits from absolute value, and append 1 for sign
        -> calculate pow(2,N) and subtract absolute value. This gives the negative represenation where left most bit is set for -
           -> Sum of absolute value and negative represenation add upto pow(2,N)     


-> number of bits in a number : math.floor(math.log(number,2)) + 1
